{
  "id": "0ca9c5fd5016cd689e4ba38c6e3f4efb",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.12",
  "solcLongVersion": "0.8.12",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/AAFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\nimport '@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol';\n\ncontract AAFactory {\n    bytes32 public aaBytecodeHash;\n    constructor(bytes32 _aaBytecodeHash) {\n        aaBytecodeHash = _aaBytecodeHash;\n    }\n\n    function deployAccount(\n        bytes32 salt,\n        address owner1,\n        address owner2\n    ) external returns (address) {\n        return DEPLOYER_SYSTEM_CONTRACT.create2AA(salt, aaBytecodeHash, 0, abi.encode(owner1, owner2));\n    }\n}\n"
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol": {
        "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IAccountCodeStorage.sol\";\nimport \"./interfaces/INonceHolder.sol\";\nimport \"./interfaces/IContractDeployer.sol\";\nimport \"./interfaces/IKnownCodesStorage.sol\";\nimport \"./interfaces/IImmutableSimulator.sol\";\nimport \"./interfaces/IEthToken.sol\";\nimport \"./interfaces/IL1Messenger.sol\";\nimport \"./ChainIdSimulator.sol\";\n\nuint160 constant SYSTEM_CONTRACTS_OFFSET = 0x8000; // 2^15\n\naddress constant ECRECOVER_SYSTEM_CONTRACT = address(0x01);\naddress constant SHA256_SYSTEM_CONTRACT = address(0x02);\n\naddress constant BOOTLOADER_FORMAL_ADDRESS = address(SYSTEM_CONTRACTS_OFFSET + 0x01);\nIAccountCodeStorage constant ACCOUNT_CODE_STORAGE_SYSTEM_CONTRACT = IAccountCodeStorage(address(SYSTEM_CONTRACTS_OFFSET + 0x02));\nINonceHolder constant NONCE_HOLDER_SYSTEM_CONTRACT = INonceHolder(address(SYSTEM_CONTRACTS_OFFSET + 0x03));\nIKnownCodesStorage constant KNOWN_CODE_STORAGE_CONTRACT = IKnownCodesStorage(address(SYSTEM_CONTRACTS_OFFSET + 0x04));\nIImmutableSimulator constant IMMUTABLE_SIMULATOR_SYSTEM_CONTRACT = IImmutableSimulator(address(SYSTEM_CONTRACTS_OFFSET + 0x05));\nIContractDeployer constant DEPLOYER_SYSTEM_CONTRACT = IContractDeployer(address(SYSTEM_CONTRACTS_OFFSET + 0x06));\n\n// A contract that is allowed to deploy any codehash\n// on any address. To be used only during an upgrade.\naddress constant FORCE_DEPLOYER = address(SYSTEM_CONTRACTS_OFFSET + 0x07);\nIL1Messenger constant L1_MESSENGER_CONTRACT = IL1Messenger(address(SYSTEM_CONTRACTS_OFFSET + 0x08));\naddress constant MSG_VALUE_SYSTEM_CONTRACT = address(SYSTEM_CONTRACTS_OFFSET + 0x09);\n\nIEthToken constant ETH_TOKEN_SYSTEM_CONTRACT = IEthToken(address(SYSTEM_CONTRACTS_OFFSET + 0x0a));\n\naddress constant KECCAK256_SYSTEM_CONTRACT = address(SYSTEM_CONTRACTS_OFFSET + 0x10);\n\nChainIdSimulator constant CHAIN_ID_SIMULATOR = ChainIdSimulator(address(SYSTEM_CONTRACTS_OFFSET + 0x0b));\n\nuint256 constant MAX_SYSTEM_CONTRACT_ADDRESS = 0xffff;\n\nbytes32 constant DEFAULT_AA_CODE_HASH = 0x00;\n\n// The number of bytes that are published during the contract deployment\n// in addition to the bytecode itself.\nuint256 constant BYTECODE_PUBLISHING_OVERHEAD = 100;\n"
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IAccountCodeStorage.sol": {
        "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IAccountCodeStorage {\n    function storeCodeHash(address _address, bytes32 _hash) external;\n\n    function getRawCodeHash(address _address) external view returns (bytes32 codeHash);\n\n    function getCodeHash(address _address) external returns (bytes32 codeHash);\n    \n    function getCodeSize(address _address) external returns (uint256 codeSize);\n}\n"
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/interfaces/INonceHolder.sol": {
        "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface INonceHolder {\n    function getAccountNonce() external view returns (uint256);\n\n    function incrementNonce() external returns (uint256);\n\n    function incrementNonceIfEquals(uint256 _expectedNonce) external;\n\n    function getDeploymentNonce(address _address) external view returns (uint256);\n\n    function incrementDeploymentNonce(address _address) external returns (uint256);\n}\n"
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IContractDeployer.sol": {
        "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IContractDeployer {\n    event ContractDeployed(address indexed deployerAddress, bytes32 indexed bytecodeHash, address indexed contractAddress);\n\n    function create2 (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        uint256 _value,\n        bytes calldata _input\n    ) external returns (address);\n\n    function create2AA (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        uint256 _value,\n        bytes calldata _input\n    ) external returns (address);\n\n    /// @dev While the `_salt` parameter is not used anywhere here, \n    /// it is still needed for consistency between `create` and\n    /// `create2` functions (required by the compiler).\n    function create (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        uint256 _value,\n        bytes calldata _input\n    ) external returns (address);\n\n    /// @dev While `_salt` is never used here, we leave it here as a parameter\n    /// for the consistency with the `create` function.\n    function createAA (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        uint256 _value,\n        bytes calldata _input\n    ) external returns (address);\n}\n"
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IKnownCodesStorage.sol": {
        "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nuint256 constant MAX_KNOWN_CODE_HASHES = 16;\ninterface IKnownCodesStorage {\n    function markAsKnownCandidates(bytes32[MAX_KNOWN_CODE_HASHES] calldata _hash) external;\n\n    function markAsRepublished(bytes32 _hash) external;\n\n    function removeUnusedKnownCandidate(bytes32 _hash) external;\n\n    function checkIfKnown(bytes32 _hash) external view returns (bool);\n\n    function getMarker(bytes32 _hash) external view returns (uint256);\n}\n"
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IImmutableSimulator.sol": {
        "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nstruct ImmutableData {\n    uint256 index;\n    bytes32 value;\n}\n\ninterface IImmutableSimulator {\n    function getImmutable(address _dest, uint256 _index) external view returns (bytes32);\n\n    function setImmutables(address _dest, ImmutableData[] calldata immutables) external;\n}\n"
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IEthToken.sol": {
        "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IEthToken {\n    function balanceOf(address) external returns (uint256);\n    \n    function transferFromTo(address _from, address _to, uint256 _amount) external;\n}\n"
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IL1Messenger.sol": {
        "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IL1Messenger {\n    // Possibly in the future we will be able to track the messages sent to L1 with \n    // some hooks in the VM. For now, it is much easier to track them with L2 events.\n    event L1MessageSent(address indexed _sender, bytes32 indexed _hash, bytes _message);\n\n    function sendToL1(bytes memory _message) external returns (bytes32);\n}\n"
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/ChainIdSimulator.sol": {
        "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @author Matter Labs\n * @notice Contracts that store chain Id of the network.\n * @notice Used as a temporary solution to be a source of the truth about the chain id of the network.\n */\ncontract ChainIdSimulator {\n    uint256 public chainId = 270;\n}\n"
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol": {
        "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport './RLPEncoder.sol';\nimport './Constants.sol';\n\n// TODO: change it to the `0x80`, must be changed atomically with the server.\n/// @dev Denotes the first byte of the special zkSync's EIP-712-signed transaction.\nuint8 constant EIP_712_TX_TYPE = 0x71;\n\n/// @dev Denotes the first byte of some legacy transaction, which type is unknown to the server.\nuint8 constant LEGACY_TX_TYPE = 0x0;\n\nstruct Transaction {\n\tuint8 txType;\n\tuint256 from;\n\tuint256 to;\n\tuint256 feeToken;\n\tuint256 ergsLimit;\n\tuint256 ergsPerPubdataByteLimit;\n\tuint256 ergsPrice;\n\t// In the future, we might want to add some\n\t// new fields to the struct. The `txData` struct\n\t// is to be passed to AA and any changes to its structure\n\t// would mean a breaking change to these AAs. In order to prevent this,\n\t// we should keep some fields as \"reserved\".\n\t// It is also recommneded that their length is fixed, since\n\t// it would allow easier proof integration (in case we will need\n\t// some special circuit for preprocessing transactions).\n\tuint256[6] reserved;\n\tbytes data;\n\tbytes signature;\n\t// Reserved dynamic type for the future use-case. Using it should be avoided,\n\t// But it is still here, just in case we want to enable some additional functionality.\n\tbytes reservedDynamic;\n}\n\nlibrary TransactionHelper {\n\t/// @notice The EIP-712 typehash for the contract's domain\n\tbytes32 constant EIP712_DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,string version,uint256 chainId)');\n\n\t// TODO: migrate to this type once the backend is ready\n\tbytes32 constant EIP712_TRANSACTION_TYPE_HASH =\n\t\tkeccak256(\n\t\t\t'Transaction(uint8 txType,uint256 to,uint256 value,bytes data,uint256 feeToken,uint256 ergsLimit,uint256 ergsPerPubdataByteLimit,uint256 ergsPrice,uint256 nonce)'\n\t\t);\n\n\tfunction encodeHash(Transaction calldata _transaction) internal view returns (bytes32 resultHash) {\n\t\tif (_transaction.txType == LEGACY_TX_TYPE) {\n\t\t\tresultHash = _encodeHashLegacyTx(_transaction);\n\t\t} else if (_transaction.txType == EIP_712_TX_TYPE) {\n\t\t\tresultHash = _encodeHashEIP712Tx(_transaction);\n\t\t} else {\n\t\t\t// Currently no other transaction types are supported.\n\t\t\t// Any new transaction types will be processed in a similar manner.\n\t\t\trevert();\n\t\t}\n\t}\n\n\t/// @notice encode hash of the zkSync native transaction type.\n\t/// @return keccak256 of the EIP-712 encoded representation of transaction\n\tfunction _encodeHashEIP712Tx(Transaction calldata _transaction) private view returns (bytes32) {\n        bytes32 structHash = keccak256(\n            abi.encode(\n                EIP712_TRANSACTION_TYPE_HASH,\n                _transaction.txType,\n                _transaction.to,\n                _transaction.reserved[1],\n                keccak256(_transaction.data),\n                _transaction.feeToken,\n                _transaction.ergsLimit,\n                _transaction.ergsPerPubdataByteLimit,\n                _transaction.ergsPrice,\n                _transaction.reserved[0]\n\t\t\t)\n\t\t);\n\n\t\tbytes32 domainSeparator = keccak256(abi.encode(EIP712_DOMAIN_TYPEHASH, keccak256('zkSync'), keccak256('2'), _getChainId()));\n\n\t\treturn keccak256(abi.encodePacked('\\x19\\x01', domainSeparator, structHash));\n\t}\n\n\t/// @notice encode hash of the legacy transaction type.\n\t/// @return keccak256 of the serialized RLP encoded representation of transaction\n\tfunction _encodeHashLegacyTx(Transaction calldata _transaction) private view returns (bytes32) {\n\t\t// Hash of legacy transactions are encoded as one of the:\n\t\t// - RLP(nonce, gasPrice, gasLimit, to, value, data, chainId, 0, 0)\n\t\t// - RLP(nonce, gasPrice, gasLimit, to, value, data)\n\t\t//\n\t\t// In this RLP encoding, only one higher list appears, so we encode each element\n\t\t// inside list and then concatenate the length of all elements with them.\n\n\t\tbytes memory encodedNonce = RLPEncoder.encodeUint256(_transaction.reserved[0]);\n\t\t// Encode `gasPrice` and `gasLimit` together to prevent \"stack too deep error\".\n\t\tbytes memory encodedGasParam;\n\t\t{\n\t\t\tbytes memory encodedGasPrice = RLPEncoder.encodeUint256(_transaction.ergsPrice);\n\t\t\tbytes memory encodedGasLimit = RLPEncoder.encodeUint256(_transaction.ergsLimit);\n\t\t\tencodedGasParam = bytes.concat(encodedGasPrice, encodedGasLimit);\n\t\t}\n\n\t\tbytes memory encodedTo = RLPEncoder.encodeAddress(address(uint160(_transaction.to)));\n\t\tbytes memory encodedValue = RLPEncoder.encodeUint256(_transaction.reserved[1]);\n\t\t// Encode only the length of the transaction data, and not the data itself,\n\t\t// so as not to copy to memory a potentially huge transaction data twice.\n\t\tbytes memory encodedDataLength;\n\t\t{\n\t\t\tuint256 txDataLen = _transaction.data.length;\n\t\t\tif (txDataLen != 1) {\n\t\t\t\t// If the length is not equal to one, then only using the length can it be encoded definitely.\n\t\t\t\tencodedDataLength = RLPEncoder.encodeNonSingleBytesLen(txDataLen);\n\t\t\t} else if (_transaction.data[0] >= 0x80) {\n\t\t\t\t// If input is a byte in [0x80, 0xff] range, RLP encoding will concatenates 0x81 with the byte.\n\t\t\t\tencodedDataLength = hex'81';\n\t\t\t}\n\t\t\t// Otherwise the length is not encoded at all.\n\t\t}\n\n\t\t// Encode `chainId` according to EIP-155, but only if the `chainId` is specified in the transaction.\n\t\tbytes memory encodedChainId;\n\t\tif (_transaction.reserved[2] != 0) {\n\t\t\t// TODO: calculate RLP encoded chainId on compiler time\n\t\t\tencodedChainId = bytes.concat(RLPEncoder.encodeUint256(_getChainId()), hex'80_80');\n\t\t}\n\n\t\tbytes memory encodedListLength;\n\t\tunchecked {\n\t\t\tuint256 listLength = encodedNonce.length +\n\t\t\t\tencodedGasParam.length +\n\t\t\t\tencodedTo.length +\n\t\t\t\tencodedValue.length +\n\t\t\t\tencodedDataLength.length +\n\t\t\t\t_transaction.data.length +\n\t\t\t\tencodedChainId.length;\n\n\t\t\tencodedListLength = RLPEncoder.encodeListLen(listLength);\n\t\t}\n\n\t\treturn\n\t\t\tkeccak256(\n\t\t\t\tbytes.concat(\n\t\t\t\t\tencodedListLength,\n\t\t\t\t\tencodedNonce,\n\t\t\t\t\tencodedGasParam,\n\t\t\t\t\tencodedTo,\n\t\t\t\t\tencodedValue,\n\t\t\t\t\tencodedDataLength,\n\t\t\t\t\t_transaction.data,\n\t\t\t\t\tencodedChainId\n\t\t\t\t)\n\t\t\t);\n\t}\n\n\tfunction _getChainId() internal view returns(uint256 chainId) { \n\t\tchainId = CHAIN_ID_SIMULATOR.chainId();\n\t}\n}\n"
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/RLPEncoder.sol": {
        "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nlibrary RLPEncoder {\n\tfunction encodeAddress(address _val) internal pure returns (bytes memory encoded) {\n\t\t// The size is equal to 14 bytes of the address itself + 1 for encoding bytes length in RLP.\n\t\tencoded = new bytes(0x15);\n\n\t\tbytes20 shiftedVal = bytes20(_val);\n\t\tassembly {\n\t\t\t// In the first byte we write the encoded length as 0x80 + 0x14 == 0x94.\n\t\t\tmstore(add(encoded, 0x20), 0x9400000000000000000000000000000000000000000000000000000000000000)\n\t\t\t// Write address data without stripping zeros.\n\t\t\tmstore(add(encoded, 0x21), shiftedVal)\n\t\t}\n\t}\n\n\tfunction encodeUint256(uint256 _val) internal pure returns (bytes memory encoded) {\n\t\tunchecked {\n\t\t\tif (_val < 128) {\n\t\t\t\tencoded = new bytes(1);\n\t\t\t\t// Handle zero as a non-value, since stripping zeroes results in an empty byte array\n\t\t\t\tencoded[0] = (_val == 0) ? bytes1(uint8(128)) : bytes1(uint8(_val));\n\t\t\t} else {\n\t\t\t\tuint256 hbs = _highestByteSet(_val);\n\n\t\t\t\tencoded = new bytes(hbs + 2);\n\t\t\t\tencoded[0] = bytes1(uint8(hbs + 0x81));\n\n\t\t\t\tuint256 lbs = 31 - hbs;\n\t\t\t\tuint256 shiftedVal = _val << (lbs * 8);\n\n\t\t\t\tassembly {\n\t\t\t\t\tmstore(add(encoded, 0x21), shiftedVal)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @notice Encodes the size of bytes in RLP format.\n\t/// NOTE: panics if the length is 1, since the length encoding is ambiguous in this case.\n\tfunction encodeNonSingleBytesLen(uint256 _len) internal pure returns (bytes memory) {\n\t\trequire(_len != 1);\n\t\treturn _encodeLength(_len, 0x80);\n\t}\n\n\t/// @notice Encodes the size of list items in RLP format.\n\tfunction encodeListLen(uint256 _len) internal pure returns (bytes memory) {\n\t\treturn _encodeLength(_len, 0xc0);\n\t}\n\n\tfunction _encodeLength(uint256 _len, uint256 _offset) private pure returns (bytes memory encoded) {\n\t\tunchecked {\n\t\t\tif (_len < 56) {\n\t\t\t\tencoded = new bytes(1);\n\t\t\t\tencoded[0] = bytes1(uint8(_len + _offset));\n\t\t\t} else {\n\t\t\t\tuint256 hbs = _highestByteSet(_len);\n\n\t\t\t\tencoded = new bytes(hbs + 2);\n\t\t\t\tencoded[0] = bytes1(uint8(_offset + hbs + 56));\n\n\t\t\t\tuint256 lbs = 31 - hbs;\n\t\t\t\tuint256 shiftedVal = _len << (lbs * 8);\n\n\t\t\t\tassembly {\n\t\t\t\t\tmstore(add(encoded, 0x21), shiftedVal)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @notice Computes the index of the highest byte set in number.\n\t/// @notice Uses little endian ordering (The least significant byte has index `0`).\n\t/// NOTE: returns `0` for `0`\n\tfunction _highestByteSet(uint256 _number) private pure returns (uint256 hbs) {\n\t\t// TODO: for optimization, the comparison can be replaced with bitwise operations\n\t\t// should be resolver after evaluating the cost of opcodes.\n\t\tif (_number >= 2**128) {\n\t\t\t_number >>= 128;\n\t\t\thbs += 16;\n\t\t}\n\t\tif (_number >= 2**64) {\n\t\t\t_number >>= 64;\n\t\t\thbs += 8;\n\t\t}\n\t\tif (_number >= 2**32) {\n\t\t\t_number >>= 32;\n\t\t\thbs += 4;\n\t\t}\n\t\tif (_number >= 2**16) {\n\t\t\t_number >>= 16;\n\t\t\thbs += 2;\n\t\t}\n\t\tif (_number >= 2**8) {\n\t\t\thbs += 1;\n\t\t}\n\t}\n}\n"
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IAccountAbstraction.sol": {
        "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport '../TransactionHelper.sol';\n\ninterface IAccountAbstraction {\n\tfunction validateTransaction(Transaction calldata _transaction) external payable;\n\n\tfunction executeTransaction(Transaction calldata _transaction) external payable;\n\n\tfunction executeTransactionFromOutside(Transaction calldata _transaction) external payable;\n}\n"
      },
      "contracts/TwoUserMultisig.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol';\nimport '@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol';\n\nimport '@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IAccountAbstraction.sol';\n\nimport \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract TwoUserMultisig is IAccountAbstraction, IERC1271 {\n\tusing TransactionHelper for Transaction;\n\n    address public owner1;\n    address public owner2;\n\n    constructor(address _owner1, address _owner2) {\n        owner1 = _owner1;\n        owner2 = _owner2;\n    }\n\n\t// bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\n\tbytes4 constant EIP1271_SUCCESS_RETURN_VALUE = 0x1626ba7e;\n\n\n\tmodifier onlyBootloader() {\n\t\trequire(msg.sender == BOOTLOADER_FORMAL_ADDRESS, \"Only bootloader can call this method\");\n\t\t// Continure execution if called from the bootloader.\n\t\t_;\n\t}\n\n\tfunction validateTransaction(Transaction calldata _transaction) external payable override onlyBootloader {\n\t\t_validateTransaction(_transaction);\n\t}\n\n\tfunction _validateTransaction(Transaction calldata _transaction) internal {\n        // We need to increment the nonce of the account\n\t\tNONCE_HOLDER_SYSTEM_CONTRACT.incrementNonceIfEquals(_transaction.reserved[0]);\n\t\tbytes32 txHash = _transaction.encodeHash();\n\n\t\trequire(isValidSignature(txHash, _transaction.signature) == EIP1271_SUCCESS_RETURN_VALUE);\n\t}\n\n\tfunction executeTransaction(Transaction calldata _transaction) external payable override onlyBootloader {\n\t\t_executeTransaction(_transaction);\n\t}\n\n\tfunction executeTransactionFromOutside(Transaction calldata _transaction) external payable {\n\t\t_validateTransaction(_transaction);\n\t\t_executeTransaction(_transaction);\n\t}\n\n\tfunction _executeTransaction(Transaction calldata _transaction) internal {\n\t\tuint256 to = _transaction.to;\n\t\tuint256 value = _transaction.reserved[1];\n\t\tbytes memory data = _transaction.data;\n\n\t\tbool success;\n\t\tassembly {\n\t\t\tsuccess := call(gas(), to, value, add(data, 0x20), mload(data), 0, 0)\n\t\t}\n\t\trequire(success);\n\t}\n\n\tfunction isValidSignature(bytes32 _hash, bytes calldata _signature) public override view returns (bytes4) {\n        // The signature is the concatenation of the ECDSA signatures of the owners\n        // Each ECDSA signature is 65 bytes long. That means that the combined signature is 130 bytes long. \n\t\trequire(_signature.length == 130, 'Signature length is incorrect');\n\n        address recoveredAddr1 = ECDSA.recover(_hash, _signature[0:65]);\n        address recoveredAddr2 = ECDSA.recover(_hash, _signature[65:130]);\n\n        require(recoveredAddr1 == owner1);\n        require(recoveredAddr2 == owner2);\n\n\t\treturn EIP1271_SUCCESS_RETURN_VALUE;\n\t}\n\n\tfunction isValidSignature2(\n\t\tbytes32 _hash, \n\t\tbytes calldata _signature,\n\t\taddress signer\n\t) public view returns (bytes4) {\n        // The signature is the concatenation of the ECDSA signatures of the owners\n        // Each ECDSA signature is 65 bytes long. That means that the combined signature is 130 bytes long. \n\t\t// require(_signature.length == 130, 'Signature length is incorrect');\n\n        address recoveredAddr1 = ECDSA.recover(_hash, _signature);\n        // address recoveredAddr2 = ECDSA.recover(_hash, _signature[65:130]);\n\n        require(recoveredAddr1 == signer);\n        // require(recoveredAddr2 == owner2);\n\n\t\treturn EIP1271_SUCCESS_RETURN_VALUE;\n\t}\n\n\treceive() external payable {}\n}\n"
      },
      "@openzeppelin/contracts/interfaces/IERC1271.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/Strings.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "@matterlabs/zksync-contracts/l2/system-contracts/ChainIdSimulator.sol": {
        "ChainIdSimulator": {
          "abi": [
            {
              "inputs": [],
              "name": "chainId",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": "0000001d04000041000000000141016f0000001e0400004100000000001403760000001f010000410000000000210376000000000130004c000000090000613d006e000a0000034f006e00220000034f0000008001000039000000400200003900000000001203760000000001000357000000000110004c000000200000c13d0000010e010000390000000002000019006e00520000034f0000001f010000410000000001010375000000000110004c0000001b0000c13d000000800100003900000000020000190000000003000019006e005f0000034f00000020010000390000000000100376000000000001037600000020010000410000006f000103700000000001000019000000700001037200010000000000020000008005000039000000400100003900000000005103760000001f010000410000000001010375000000040110008c000000470000413d0000001e01000041000000000101037500000000010103770000002102000041000000000121016f000000220110009c000000470000c13d0000000001000357000000000110004c000000490000c13d0000001f010000410000000001010375000000040110008a000000010200008a0000002303000041000000000221004b00000000020000190000000002032019000000000131016f000000000431013f000000230110009c00000000010000190000000001034019000000230340009c000000000102c019000000000110004c0000004b0000c13d0000000001000019000000700001037200000000010000190000007000010372000000000100001900000070000103720000000001000019000100000005001d006e00540000034f0000000102000029000000000012037600000024010000410000006f00010370000000000012035b000000000001036f0000000001010359000000000001036f000000000401037500000000043401cf000000000434022f0000010003300089000000000232022f00000000023201cf000000000242019f0000000000210376000000000001036f0000000504300270000000000540004c000000670000613d00000000002103760000002001100039000000010440008a000000000540004c000000620000c13d0000001f0330018f000000000430004c0000006d0000613d0000000303300210006e00560000034f000000000001036f000000000001036f0000006e000003740000006f000103700000007000010372000000000000e001000000000000e001000000000000e0010000000000000000000000000000000000000000000000000000000000ffffff0000000000000000000000000000000000000000000000000000000000ffffe00000000000000000000000000000000000000000000000000000000000ffffc00000000000000000000000000000000000000000000000400000000000000000ffffffff000000000000000000000000000000000000000000000000000000009a8a05920000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000080"
            }
          },
          "factoryDependencies": {},
          "hash": "0025e69bab3867947c4464a43c84198b1bf0d39e6a82768b09ab43cd789727bb"
        }
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/RLPEncoder.sol": {
        "RLPEncoder": {
          "abi": [],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": "0000001104000041000000000141016f0000001204000041000000000014037600000013010000410000000000210376000000000130004c000000090000613d0040000e0000034f000000800100003900000040020000390000000000120376000000000100001900000042000103720000008001000039000000400200003900000000001203760000000001000357000000000110004c000000240000c13d00000013010000410000000001010375000000000110004c0000001c0000c13d000000800100003900000000020000190000000003000019004000310000034f00000000010003500000001402000041004000260000034f0000002001000039000000000010037600000000000103760000001501000041000000410001037000000000010000190000004200010372000000000012035b000000000001036f000000000401037500000000043401cf000000000434022f0000010003300089000000000232022f00000000023201cf000000000242019f0000000000210376000000000001036f0000000504300270000000000540004c000000390000613d00000000002103760000002001100039000000010440008a000000000540004c000000340000c13d0000001f0330018f000000000430004c0000003f0000613d0000000303300210004000280000034f000000000001036f000000000001036f000000400000037400000041000103700000004200010372000000000000e0010000000000000000000000000000000000000000000000000000000000ffffff0000000000000000000000000000000000000000000000000000000000ffffe00000000000000000000000000000000000000000000000000000000000ffffc0cd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad00000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            }
          },
          "factoryDependencies": {},
          "hash": "0017e5533e5bb125e3e439b647b8c692237e237fbcac081871c3793489699b23"
        }
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol": {
        "TransactionHelper": {
          "abi": [],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": "0000001104000041000000000141016f0000001204000041000000000014037600000013010000410000000000210376000000000130004c000000090000613d0040000e0000034f000000800100003900000040020000390000000000120376000000000100001900000042000103720000008001000039000000400200003900000000001203760000000001000357000000000110004c000000240000c13d00000013010000410000000001010375000000000110004c0000001c0000c13d000000800100003900000000020000190000000003000019004000310000034f00000000010003500000001402000041004000260000034f0000002001000039000000000010037600000000000103760000001501000041000000410001037000000000010000190000004200010372000000000012035b000000000001036f000000000401037500000000043401cf000000000434022f0000010003300089000000000232022f00000000023201cf000000000242019f0000000000210376000000000001036f0000000504300270000000000540004c000000390000613d00000000002103760000002001100039000000010440008a000000000540004c000000340000c13d0000001f0330018f000000000430004c0000003f0000613d0000000303300210004000280000034f000000000001036f000000000001036f000000400000037400000041000103700000004200010372000000000000e0010000000000000000000000000000000000000000000000000000000000ffffff0000000000000000000000000000000000000000000000000000000000ffffe00000000000000000000000000000000000000000000000000000000000ffffc0cd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad00000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            }
          },
          "factoryDependencies": {},
          "hash": "0017e5533e5bb125e3e439b647b8c692237e237fbcac081871c3793489699b23"
        }
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IAccountAbstraction.sol": {
        "IAccountAbstraction": {
          "abi": [
            {
              "inputs": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "txType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "from",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "to",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "feeToken",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsPerPubdataByteLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256[6]",
                      "name": "reserved",
                      "type": "uint256[6]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "signature",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "reservedDynamic",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Transaction",
                  "name": "_transaction",
                  "type": "tuple"
                }
              ],
              "name": "executeTransaction",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "txType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "from",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "to",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "feeToken",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsPerPubdataByteLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256[6]",
                      "name": "reserved",
                      "type": "uint256[6]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "signature",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "reservedDynamic",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Transaction",
                  "name": "_transaction",
                  "type": "tuple"
                }
              ],
              "name": "executeTransactionFromOutside",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "txType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "from",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "to",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "feeToken",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsPerPubdataByteLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256[6]",
                      "name": "reserved",
                      "type": "uint256[6]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "signature",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "reservedDynamic",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Transaction",
                  "name": "_transaction",
                  "type": "tuple"
                }
              ],
              "name": "validateTransaction",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            }
          ]
        }
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IAccountCodeStorage.sol": {
        "IAccountCodeStorage": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "getCodeHash",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "codeHash",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "getCodeSize",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "codeSize",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "getRawCodeHash",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "codeHash",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "_hash",
                  "type": "bytes32"
                }
              ],
              "name": "storeCodeHash",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        }
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IContractDeployer.sol": {
        "IContractDeployer": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "deployerAddress",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "bytecodeHash",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ],
              "name": "ContractDeployed",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_salt",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "_bytecodeHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "_input",
                  "type": "bytes"
                }
              ],
              "name": "create",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_salt",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "_bytecodeHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "_input",
                  "type": "bytes"
                }
              ],
              "name": "create2",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_salt",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "_bytecodeHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "_input",
                  "type": "bytes"
                }
              ],
              "name": "create2AA",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_salt",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "_bytecodeHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "_value",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "_input",
                  "type": "bytes"
                }
              ],
              "name": "createAA",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        }
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IEthToken.sol": {
        "IEthToken": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFromTo",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        }
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IImmutableSimulator.sol": {
        "IImmutableSimulator": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_dest",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_index",
                  "type": "uint256"
                }
              ],
              "name": "getImmutable",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_dest",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "index",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "value",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct ImmutableData[]",
                  "name": "immutables",
                  "type": "tuple[]"
                }
              ],
              "name": "setImmutables",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        }
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IKnownCodesStorage.sol": {
        "IKnownCodesStorage": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_hash",
                  "type": "bytes32"
                }
              ],
              "name": "checkIfKnown",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_hash",
                  "type": "bytes32"
                }
              ],
              "name": "getMarker",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32[16]",
                  "name": "_hash",
                  "type": "bytes32[16]"
                }
              ],
              "name": "markAsKnownCandidates",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_hash",
                  "type": "bytes32"
                }
              ],
              "name": "markAsRepublished",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_hash",
                  "type": "bytes32"
                }
              ],
              "name": "removeUnusedKnownCandidate",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        }
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IL1Messenger.sol": {
        "IL1Messenger": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "_sender",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "_hash",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "_message",
                  "type": "bytes"
                }
              ],
              "name": "L1MessageSent",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes",
                  "name": "_message",
                  "type": "bytes"
                }
              ],
              "name": "sendToL1",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        }
      },
      "@matterlabs/zksync-contracts/l2/system-contracts/interfaces/INonceHolder.sol": {
        "INonceHolder": {
          "abi": [
            {
              "inputs": [],
              "name": "getAccountNonce",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "getDeploymentNonce",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "incrementDeploymentNonce",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "incrementNonce",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_expectedNonce",
                  "type": "uint256"
                }
              ],
              "name": "incrementNonceIfEquals",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        }
      },
      "@openzeppelin/contracts/interfaces/IERC1271.sol": {
        "IERC1271": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ],
              "name": "isValidSignature",
              "outputs": [
                {
                  "internalType": "bytes4",
                  "name": "magicValue",
                  "type": "bytes4"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ]
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol": {
        "Strings": {
          "abi": [],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": "0000001104000041000000000141016f0000001204000041000000000014037600000013010000410000000000210376000000000130004c000000090000613d0040000e0000034f000000800100003900000040020000390000000000120376000000000100001900000042000103720000008001000039000000400200003900000000001203760000000001000357000000000110004c000000240000c13d00000013010000410000000001010375000000000110004c0000001c0000c13d000000800100003900000000020000190000000003000019004000310000034f00000000010003500000001402000041004000260000034f0000002001000039000000000010037600000000000103760000001501000041000000410001037000000000010000190000004200010372000000000012035b000000000001036f000000000401037500000000043401cf000000000434022f0000010003300089000000000232022f00000000023201cf000000000242019f0000000000210376000000000001036f0000000504300270000000000540004c000000390000613d00000000002103760000002001100039000000010440008a000000000540004c000000340000c13d0000001f0330018f000000000430004c0000003f0000613d0000000303300210004000280000034f000000000001036f000000000001036f000000400000037400000041000103700000004200010372000000000000e0010000000000000000000000000000000000000000000000000000000000ffffff0000000000000000000000000000000000000000000000000000000000ffffe00000000000000000000000000000000000000000000000000000000000ffffc0cd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad00000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            }
          },
          "factoryDependencies": {},
          "hash": "0017e5533e5bb125e3e439b647b8c692237e237fbcac081871c3793489699b23"
        }
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
        "ECDSA": {
          "abi": [],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": "0000001104000041000000000141016f0000001204000041000000000014037600000013010000410000000000210376000000000130004c000000090000613d0040000e0000034f000000800100003900000040020000390000000000120376000000000100001900000042000103720000008001000039000000400200003900000000001203760000000001000357000000000110004c000000240000c13d00000013010000410000000001010375000000000110004c0000001c0000c13d000000800100003900000000020000190000000003000019004000310000034f00000000010003500000001402000041004000260000034f0000002001000039000000000010037600000000000103760000001501000041000000410001037000000000010000190000004200010372000000000012035b000000000001036f000000000401037500000000043401cf000000000434022f0000010003300089000000000232022f00000000023201cf000000000242019f0000000000210376000000000001036f0000000504300270000000000540004c000000390000613d00000000002103760000002001100039000000010440008a000000000540004c000000340000c13d0000001f0330018f000000000430004c0000003f0000613d0000000303300210004000280000034f000000000001036f000000000001036f000000400000037400000041000103700000004200010372000000000000e0010000000000000000000000000000000000000000000000000000000000ffffff0000000000000000000000000000000000000000000000000000000000ffffe00000000000000000000000000000000000000000000000000000000000ffffc0cd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad00000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            }
          },
          "factoryDependencies": {},
          "hash": "0017e5533e5bb125e3e439b647b8c692237e237fbcac081871c3793489699b23"
        }
      },
      "contracts/AAFactory.sol": {
        "AAFactory": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_aaBytecodeHash",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "aaBytecodeHash",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "owner1",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "owner2",
                  "type": "address"
                }
              ],
              "name": "deployAccount",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": ""
            }
          },
          "factoryDependencies": {},
          "hash": "00993f2ed9bf20d1ed94086637f41a98d32d0da554bd826ec8600087fd0c064c"
        }
      },
      "contracts/TwoUserMultisig.sol": {
        "TwoUserMultisig": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_owner1",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_owner2",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "txType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "from",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "to",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "feeToken",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsPerPubdataByteLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256[6]",
                      "name": "reserved",
                      "type": "uint256[6]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "signature",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "reservedDynamic",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Transaction",
                  "name": "_transaction",
                  "type": "tuple"
                }
              ],
              "name": "executeTransaction",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "txType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "from",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "to",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "feeToken",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsPerPubdataByteLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256[6]",
                      "name": "reserved",
                      "type": "uint256[6]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "signature",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "reservedDynamic",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Transaction",
                  "name": "_transaction",
                  "type": "tuple"
                }
              ],
              "name": "executeTransactionFromOutside",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "_signature",
                  "type": "bytes"
                }
              ],
              "name": "isValidSignature",
              "outputs": [
                {
                  "internalType": "bytes4",
                  "name": "",
                  "type": "bytes4"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "_signature",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                }
              ],
              "name": "isValidSignature2",
              "outputs": [
                {
                  "internalType": "bytes4",
                  "name": "",
                  "type": "bytes4"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner1",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner2",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "txType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "from",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "to",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "feeToken",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsPerPubdataByteLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256[6]",
                      "name": "reserved",
                      "type": "uint256[6]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "signature",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "reservedDynamic",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Transaction",
                  "name": "_transaction",
                  "type": "tuple"
                }
              ],
              "name": "validateTransaction",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": ""
            }
          },
          "factoryDependencies": {},
          "hash": "0373f1ff581397def228ca9f57c85dd633e52733cabb6e0c159a2cadf647894a"
        }
      }
    },
    "errors": [
      {
        "component": "general",
        "errorCode": "3420",
        "formattedMessage": "Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.12;\"\n--> contracts/AAFactory.sol\n\n",
        "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.12;\"",
        "severity": "warning",
        "sourceLocation": {
          "file": "contracts/AAFactory.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning"
      },
      {
        "component": "general",
        "errorCode": "2018",
        "formattedMessage": "Warning: Function state mutability can be restricted to pure\n  --> contracts/TwoUserMultisig.sol:80:2:\n   |\n80 | \tfunction isValidSignature2(\n   | \t^ (Relevant source part starts here and spans across multiple lines).\n\n",
        "message": "Function state mutability can be restricted to pure",
        "severity": "warning",
        "sourceLocation": {
          "file": "contracts/TwoUserMultisig.sol",
          "start": 2809,
          "end": 3479
        },
        "type": "Warning"
      },
      {
        "component": "general",
        "errorCode": null,
        "formattedMessage": "\n┌─────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It seems like you are using ecrecover to validate signature of a user account. │\n│ zkSync 2.0 will come with native account abstraction support. It is highly recommended  │\n│ NOT to rely on the fact that the account has ECDSA private key attached to it, since    │\n│ they may be ruled by a multisig and use other signature scheme. You can read more about │\n│ how you can get ready for the future AA launch here:                                    │\n│ https://v2-docs.zksync.io/dev/zksync-v2/aa.html#important-account-abstraction-support   │\n└─────────────────────────────────────────────────────────────────────────────────────────┘\n--> @openzeppelin/contracts/utils/cryptography/ECDSA.sol\n",
        "message": "\n┌─────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It seems like you are using ecrecover to validate signature of a user account. │\n│ zkSync 2.0 will come with native account abstraction support. It is highly recommended  │\n│ NOT to rely on the fact that the account has ECDSA private key attached to it, since    │\n│ they may be ruled by a multisig and use other signature scheme. You can read more about │\n│ how you can get ready for the future AA launch here:                                    │\n│ https://v2-docs.zksync.io/dev/zksync-v2/aa.html#important-account-abstraction-support   │\n└─────────────────────────────────────────────────────────────────────────────────────────┘",
        "severity": "warning",
        "sourceLocation": {
          "file": "14",
          "start": 7130,
          "end": 7154
        },
        "type": "Warning"
      }
    ]
  }
}
